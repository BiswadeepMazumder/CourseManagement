{"ast":null,"code":"var _jsxFileName = \"/Users/biswadeepmazumder/Desktop/UDAY/Project/frontend/src/Dashboard.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { Box, Heading, Text, Button, Stack, Flex, Table, Thead, Tbody, Tr, Th, Td, Collapse, Modal, ModalOverlay, ModalContent, ModalHeader, ModalFooter, ModalBody, ModalCloseButton } from '@chakra-ui/react';\nimport { useLocation, useNavigate } from 'react-router-dom';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst Dashboard = () => {\n  _s();\n  const navigate = useNavigate();\n  const location = useLocation();\n  const {\n    fullName,\n    userId,\n    userType\n  } = location.state || {}; // Extract userType here\n\n  const [enrollments, setEnrollments] = useState([]);\n  const [availableCourses, setAvailableCourses] = useState([]);\n  const [students, setStudents] = useState([]); // State to hold student list\n  const [selectedStudentEnrollments, setSelectedStudentEnrollments] = useState([]); // Enrollments for selected student\n  const [selectedStudentName, setSelectedStudentName] = useState(null); // Selected student's name\n\n  const [selectedCourseDetails, setSelectedCourseDetails] = useState(null); // Selected course details\n  const [isCoursesOpen, setIsCoursesOpen] = useState(false); // Collapsible state for the courses list\n  const [studentModalOpen, setStudentModalOpen] = useState(false); // Modal for student enrollments\n  const [courseModalOpen, setCourseModalOpen] = useState(false); // Modal for course details\n  const [isPreviousClassesOpen, setIsPreviousClassesOpen] = useState(false); // Set to false initially\n  const [isStudentsOpen, setIsStudentsOpen] = useState(false); // Collapsible state for the student list\n  const [modalMessage, setModalMessage] = useState(null); // Modal message state\n  const [isModalOpen, setIsModalOpen] = useState(false); // Control modal for enrollment status\n\n  useEffect(() => {\n    // Fetch courses regardless of the userType\n    const fetchCourses = async () => {\n      try {\n        const response = await axios.get('http://localhost:5000/api/Course/ShowAllCourses');\n        setAvailableCourses(response.data);\n      } catch (error) {\n        console.error('Error fetching courses:', error);\n      }\n    };\n    if (userType === 1) {\n      // Admin user: Fetch the list of students and courses\n      const fetchStudents = async () => {\n        try {\n          const response = await axios.get('http://localhost:5000/api/Students/ShowAllStudents');\n          setStudents(response.data);\n        } catch (error) {\n          console.error('Error fetching students:', error);\n        }\n      };\n      fetchStudents();\n      fetchCourses(); // Fetch courses for admin users\n    } else if (userType === 2) {\n      // Student user: Fetch enrollments and courses\n      const fetchEnrollments = async () => {\n        try {\n          const response = await axios.get('http://localhost:5000/api/Enrollments/GetAllEnrollments');\n          const studentEnrollments = response.data.data.filter(enrollment => enrollment.studentName === fullName);\n          const processedEnrollments = studentEnrollments.map(enrollment => {\n            let progress = 0;\n            if (enrollment.completionStatus === \"1\") {\n              progress = 100;\n            } else {\n              progress = Math.floor(Math.random() * (90 - 20 + 1)) + 20;\n            }\n            return {\n              courseName: enrollment.courseName,\n              completionStatus: enrollment.completionStatus,\n              progress\n            };\n          });\n          setEnrollments(processedEnrollments);\n        } catch (error) {\n          console.error('Error fetching enrollments:', error);\n        }\n      };\n      fetchEnrollments();\n      fetchCourses(); // Fetch courses for student users\n    }\n  }, [fullName, userType]);\n  const handleEnroll = async courseName => {\n    try {\n      // Log the request body for debugging purposes\n      const requestBody = {\n        studentName: fullName,\n        courseName: courseName\n      };\n\n      // Make the API call to enroll the student in the course\n      const response = await axios.post('http://localhost:5000/api/Enrollments/JoinCourse', requestBody);\n      if (response.data && response.data.Message) {\n        setModalMessage(response.data.Message);\n      } else {\n        setModalMessage('Successfully enrolled in the course.');\n      }\n      setIsModalOpen(true); // Open the modal to show the message\n\n      // Refetch the enrollments after enrolling in a course\n      const fetchEnrollments = async () => {\n        try {\n          const response = await axios.get('http://localhost:5000/GetAllEnrollments');\n          const studentEnrollments = response.data.data.filter(enrollment => enrollment.studentName === fullName);\n          const processedEnrollments = studentEnrollments.map(enrollment => {\n            let progress = 0;\n            if (enrollment.completionStatus === \"1\") {\n              progress = 100;\n            } else {\n              progress = Math.floor(Math.random() * (90 - 20 + 1)) + 20;\n            }\n            return {\n              courseName: enrollment.courseName,\n              completionStatus: enrollment.completionStatus,\n              progress\n            };\n          });\n          setEnrollments(processedEnrollments);\n        } catch (error) {\n          console.error('Error refetching enrollments:', error);\n          setModalMessage('Error refetching enrollments. Please try again.');\n          setIsModalOpen(true);\n        }\n      };\n      fetchEnrollments();\n    } catch (error) {\n      console.error('Error during enrollment:', error);\n      if (error.response && error.response.data && error.response.data.Message) {\n        setModalMessage(error.response.data.Message);\n      } else if (error.response && error.response.data) {\n        setModalMessage(error.response.data);\n      } else {\n        setModalMessage('An unexpected error occurred. Please try again.');\n      }\n      setIsModalOpen(true); // Show modal even in case of error\n    }\n  };\n\n  // Fetch enrollments for a particular student\n  const handleStudentClick = async studentName => {\n    try {\n      const response = await axios.get('http://localhost:5000/GetAllEnrollments');\n      const studentEnrollments = response.data.data.filter(enrollment => enrollment.studentName === studentName);\n      const processedEnrollments = studentEnrollments.map(enrollment => ({\n        courseName: enrollment.courseName,\n        completionStatus: enrollment.completionStatus,\n        progress: enrollment.completionStatus === \"1\" ? 100 : Math.floor(Math.random() * (90 - 20 + 1)) + 20\n      }));\n      setSelectedStudentEnrollments(processedEnrollments);\n      setSelectedStudentName(studentName);\n      setStudentModalOpen(true); // Open the modal\n    } catch (error) {\n      console.error('Error fetching student enrollments:', error);\n    }\n  };\n\n  // Fetch course details when clicking on a course\n  const handleCourseClick = async courseId => {\n    try {\n      const course = availableCourses.find(c => c.courseId === courseId);\n      if (course) {\n        setSelectedCourseDetails(course);\n        setCourseModalOpen(true); // Open the modal\n      }\n    } catch (error) {\n      console.error('Error fetching course details:', error);\n    }\n  };\n  const handleLogout = () => {\n    navigate('/');\n  };\n  const togglePreviousClasses = () => {\n    setIsPreviousClassesOpen(!isPreviousClassesOpen);\n  };\n  const toggleStudents = () => {\n    setIsStudentsOpen(!isStudentsOpen);\n  };\n  const toggleCourses = () => {\n    setIsCoursesOpen(!isCoursesOpen);\n  };\n\n  // Split enrollments into active and previous\n  const activeClasses = enrollments.filter(e => e.completionStatus === '0');\n  const previousClasses = enrollments.filter(e => e.completionStatus === '1');\n  const getProgressColor = progress => {\n    if (progress === 100) return 'green.300';\n    if (progress < 60) return 'red.300';\n    if (progress < 90) return 'yellow.300';\n    return 'teal.300'; // Default color\n  };\n  return /*#__PURE__*/_jsxDEV(Flex, {\n    minHeight: \"100vh\",\n    width: \"100vw\",\n    justify: \"center\",\n    align: \"start\",\n    bg: \"gray.50\",\n    p: 6,\n    children: /*#__PURE__*/_jsxDEV(Box, {\n      p: 8,\n      maxWidth: \"1200px\",\n      width: \"100%\",\n      borderWidth: 1,\n      borderRadius: 8,\n      boxShadow: \"lg\",\n      bg: \"white\",\n      children: [/*#__PURE__*/_jsxDEV(Heading, {\n        as: \"h2\",\n        size: \"xl\",\n        mb: 6,\n        textAlign: \"center\",\n        children: userType === 1 ? 'Admin Dashboard' : 'Student Dashboard'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 235,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Heading, {\n        as: \"h6\",\n        size: \"l\",\n        mb: 5,\n        textAlign: \"center\",\n        children: [\"User ID: \", userId, \", \", /*#__PURE__*/_jsxDEV(\"i\", {\n          children: /*#__PURE__*/_jsxDEV(\"b\", {\n            children: fullName\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 239,\n            columnNumber: 33\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 239,\n          columnNumber: 30\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 238,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Modal, {\n        isOpen: isModalOpen,\n        onClose: () => setIsModalOpen(false),\n        children: [/*#__PURE__*/_jsxDEV(ModalOverlay, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 244,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(ModalContent, {\n          children: [/*#__PURE__*/_jsxDEV(ModalHeader, {\n            children: \"Enrollment Status\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 246,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(ModalCloseButton, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 247,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(ModalBody, {\n            children: /*#__PURE__*/_jsxDEV(Text, {\n              children: modalMessage\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 249,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 248,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(ModalFooter, {\n            children: /*#__PURE__*/_jsxDEV(Button, {\n              colorScheme: \"blue\",\n              onClick: () => setIsModalOpen(false),\n              children: \"Close\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 252,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 251,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 245,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 243,\n        columnNumber: 9\n      }, this), userType === 1 ? /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(Box, {\n          children: [/*#__PURE__*/_jsxDEV(Flex, {\n            justifyContent: \"space-between\",\n            alignItems: \"center\",\n            children: [/*#__PURE__*/_jsxDEV(Heading, {\n              as: \"h3\",\n              size: \"md\",\n              mb: 4,\n              children: \"List of Students\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 266,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(Button, {\n              size: \"sm\",\n              onClick: toggleStudents,\n              children: isStudentsOpen ? 'Hide' : 'Show'\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 267,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 265,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Collapse, {\n            in: isStudentsOpen,\n            children: /*#__PURE__*/_jsxDEV(Flex, {\n              overflowX: \"auto\",\n              maxHeight: \"400px\",\n              children: /*#__PURE__*/_jsxDEV(Table, {\n                variant: \"simple\",\n                size: \"md\",\n                width: \"100%\",\n                children: [/*#__PURE__*/_jsxDEV(Thead, {\n                  children: /*#__PURE__*/_jsxDEV(Tr, {\n                    children: [/*#__PURE__*/_jsxDEV(Th, {\n                      position: \"sticky\",\n                      top: 0,\n                      bg: \"gray.100\",\n                      width: \"25%\",\n                      zIndex: 1,\n                      children: \"Student ID\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 276,\n                      columnNumber: 25\n                    }, this), /*#__PURE__*/_jsxDEV(Th, {\n                      position: \"sticky\",\n                      top: 0,\n                      bg: \"gray.100\",\n                      width: \"100%\",\n                      zIndex: 1,\n                      children: \"Full Name\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 277,\n                      columnNumber: 25\n                    }, this), /*#__PURE__*/_jsxDEV(Th, {\n                      position: \"sticky\",\n                      top: 0,\n                      bg: \"gray.100\",\n                      width: \"100%\",\n                      zIndex: 1,\n                      children: \"Email\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 278,\n                      columnNumber: 25\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 275,\n                    columnNumber: 23\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 274,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(Tbody, {\n                  children: students.length > 0 ? students.map(student => /*#__PURE__*/_jsxDEV(Tr, {\n                    children: [/*#__PURE__*/_jsxDEV(Td, {\n                      children: student.studentId\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 285,\n                      columnNumber: 29\n                    }, this), /*#__PURE__*/_jsxDEV(Td, {\n                      children: /*#__PURE__*/_jsxDEV(Text, {\n                        as: \"button\",\n                        color: \"blue.500\",\n                        onClick: () => handleStudentClick(student.fullName),\n                        children: student.fullName\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 287,\n                        columnNumber: 31\n                      }, this)\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 286,\n                      columnNumber: 29\n                    }, this), /*#__PURE__*/_jsxDEV(Td, {\n                      children: student.email\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 295,\n                      columnNumber: 29\n                    }, this)]\n                  }, student.studentId, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 284,\n                    columnNumber: 27\n                  }, this)) : /*#__PURE__*/_jsxDEV(Tr, {\n                    children: /*#__PURE__*/_jsxDEV(Td, {\n                      colSpan: 5,\n                      textAlign: \"center\",\n                      children: \"No students found.\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 300,\n                      columnNumber: 27\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 299,\n                    columnNumber: 25\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 281,\n                  columnNumber: 21\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 273,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 272,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 271,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 264,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Box, {\n          mt: 6,\n          children: [/*#__PURE__*/_jsxDEV(Flex, {\n            justifyContent: \"space-between\",\n            alignItems: \"center\",\n            children: [/*#__PURE__*/_jsxDEV(Heading, {\n              as: \"h3\",\n              size: \"md\",\n              mb: 4,\n              children: \"List of Courses\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 312,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(Button, {\n              size: \"sm\",\n              onClick: toggleCourses,\n              children: isCoursesOpen ? 'Hide' : 'Show'\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 313,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 311,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Collapse, {\n            in: isCoursesOpen,\n            children: /*#__PURE__*/_jsxDEV(Flex, {\n              overflowX: \"auto\",\n              maxHeight: \"400px\",\n              children: /*#__PURE__*/_jsxDEV(Table, {\n                variant: \"simple\",\n                size: \"md\",\n                width: \"100%\",\n                children: [/*#__PURE__*/_jsxDEV(Thead, {\n                  children: /*#__PURE__*/_jsxDEV(Tr, {\n                    children: [/*#__PURE__*/_jsxDEV(Th, {\n                      position: \"sticky\",\n                      top: 0,\n                      bg: \"gray.100\",\n                      width: \"25%\",\n                      zIndex: 1,\n                      children: \"Course ID\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 322,\n                      columnNumber: 25\n                    }, this), /*#__PURE__*/_jsxDEV(Th, {\n                      position: \"sticky\",\n                      top: 0,\n                      bg: \"gray.100\",\n                      width: \"40%\",\n                      zIndex: 1,\n                      children: \"Course Name\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 323,\n                      columnNumber: 25\n                    }, this), /*#__PURE__*/_jsxDEV(Th, {\n                      position: \"sticky\",\n                      top: 0,\n                      bg: \"gray.100\",\n                      width: \"100%\",\n                      zIndex: 1,\n                      children: \"Description\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 324,\n                      columnNumber: 25\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 321,\n                    columnNumber: 23\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 320,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(Tbody, {\n                  children: availableCourses.length > 0 ? availableCourses.map(course => /*#__PURE__*/_jsxDEV(Tr, {\n                    children: [/*#__PURE__*/_jsxDEV(Td, {\n                      children: course.courseId\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 331,\n                      columnNumber: 29\n                    }, this), /*#__PURE__*/_jsxDEV(Td, {\n                      children: /*#__PURE__*/_jsxDEV(Text, {\n                        as: \"button\",\n                        color: \"blue.500\",\n                        onClick: () => handleCourseClick(course.courseId),\n                        children: course.courseName\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 333,\n                        columnNumber: 31\n                      }, this)\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 332,\n                      columnNumber: 29\n                    }, this), /*#__PURE__*/_jsxDEV(Td, {\n                      children: course.description\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 341,\n                      columnNumber: 29\n                    }, this)]\n                  }, course.courseId, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 330,\n                    columnNumber: 27\n                  }, this)) : /*#__PURE__*/_jsxDEV(Tr, {\n                    children: /*#__PURE__*/_jsxDEV(Td, {\n                      colSpan: 5,\n                      textAlign: \"center\",\n                      children: \"No courses found.\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 346,\n                      columnNumber: 27\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 345,\n                    columnNumber: 25\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 327,\n                  columnNumber: 21\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 319,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 318,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 317,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 310,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true) :\n      /*#__PURE__*/\n      // Student Dashboard Content (remains unchanged)\n      _jsxDEV(Stack, {\n        spacing: 6\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 357,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Modal, {\n        isOpen: studentModalOpen,\n        onClose: () => setStudentModalOpen(false),\n        children: [/*#__PURE__*/_jsxDEV(ModalOverlay, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 366,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(ModalContent, {\n          children: [/*#__PURE__*/_jsxDEV(ModalHeader, {\n            children: [selectedStudentName, \"'s Enrollments\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 368,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(ModalCloseButton, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 369,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(ModalBody, {\n            children: selectedStudentEnrollments.length > 0 ? /*#__PURE__*/_jsxDEV(Stack, {\n              spacing: 4,\n              children: selectedStudentEnrollments.map((enrollment, index) => /*#__PURE__*/_jsxDEV(Box, {\n                p: 4,\n                borderWidth: 1,\n                borderRadius: 8,\n                bg: getProgressColor(enrollment.progress),\n                children: [/*#__PURE__*/_jsxDEV(Heading, {\n                  size: \"sm\",\n                  children: enrollment.courseName\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 375,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(Text, {\n                  children: [\"Completion Status: \", enrollment.completionStatus === '1' ? 'Completed' : 'In Progress']\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 376,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(Text, {\n                  children: [\"Progress: \", enrollment.progress, \"%\"]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 377,\n                  columnNumber: 23\n                }, this)]\n              }, index, true, {\n                fileName: _jsxFileName,\n                lineNumber: 374,\n                columnNumber: 21\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 372,\n              columnNumber: 17\n            }, this) : /*#__PURE__*/_jsxDEV(Text, {\n              children: \"No enrollments found for this student.\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 382,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 370,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(ModalFooter, {\n            children: /*#__PURE__*/_jsxDEV(Button, {\n              colorScheme: \"blue\",\n              mr: 3,\n              onClick: () => setStudentModalOpen(false),\n              children: \"Close\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 386,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 385,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 367,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 365,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Modal, {\n        isOpen: courseModalOpen,\n        onClose: () => setCourseModalOpen(false),\n        children: [/*#__PURE__*/_jsxDEV(ModalOverlay, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 393,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(ModalContent, {\n          children: [/*#__PURE__*/_jsxDEV(ModalHeader, {\n            children: [selectedCourseDetails === null || selectedCourseDetails === void 0 ? void 0 : selectedCourseDetails.courseName, \" Details\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 395,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(ModalCloseButton, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 396,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(ModalBody, {\n            children: selectedCourseDetails ? /*#__PURE__*/_jsxDEV(Stack, {\n              spacing: 4,\n              children: [/*#__PURE__*/_jsxDEV(Text, {\n                children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                  children: \"Description:\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 400,\n                  columnNumber: 25\n                }, this), \" \", selectedCourseDetails.description]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 400,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(Text, {\n                children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                  children: \"Max Seats:\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 401,\n                  columnNumber: 25\n                }, this), \" \", selectedCourseDetails.maxSeats]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 401,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(Text, {\n                children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                  children: \"Current Seats:\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 402,\n                  columnNumber: 25\n                }, this), \" \", selectedCourseDetails.currentSeats]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 402,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(Text, {\n                children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                  children: \"Start Date:\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 403,\n                  columnNumber: 25\n                }, this), \" \", new Date(selectedCourseDetails.startDate).toLocaleDateString()]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 403,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(Text, {\n                children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                  children: \"End Date:\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 404,\n                  columnNumber: 25\n                }, this), \" \", new Date(selectedCourseDetails.endDate).toLocaleDateString()]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 404,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 399,\n              columnNumber: 17\n            }, this) : /*#__PURE__*/_jsxDEV(Text, {\n              children: \"No details available for this course.\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 407,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 397,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(ModalFooter, {\n            children: /*#__PURE__*/_jsxDEV(Button, {\n              colorScheme: \"blue\",\n              mr: 3,\n              onClick: () => setCourseModalOpen(false),\n              children: \"Close\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 411,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 410,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 394,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 392,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 234,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 233,\n    columnNumber: 5\n  }, this);\n};\n_s(Dashboard, \"myfofPhuL0b1+pTtbu/OCRgo8Vw=\", false, function () {\n  return [useNavigate, useLocation];\n});\n_c = Dashboard;\nexport default Dashboard;\nvar _c;\n$RefreshReg$(_c, \"Dashboard\");","map":{"version":3,"names":["React","useState","useEffect","Box","Heading","Text","Button","Stack","Flex","Table","Thead","Tbody","Tr","Th","Td","Collapse","Modal","ModalOverlay","ModalContent","ModalHeader","ModalFooter","ModalBody","ModalCloseButton","useLocation","useNavigate","axios","jsxDEV","_jsxDEV","Fragment","_Fragment","Dashboard","_s","navigate","location","fullName","userId","userType","state","enrollments","setEnrollments","availableCourses","setAvailableCourses","students","setStudents","selectedStudentEnrollments","setSelectedStudentEnrollments","selectedStudentName","setSelectedStudentName","selectedCourseDetails","setSelectedCourseDetails","isCoursesOpen","setIsCoursesOpen","studentModalOpen","setStudentModalOpen","courseModalOpen","setCourseModalOpen","isPreviousClassesOpen","setIsPreviousClassesOpen","isStudentsOpen","setIsStudentsOpen","modalMessage","setModalMessage","isModalOpen","setIsModalOpen","fetchCourses","response","get","data","error","console","fetchStudents","fetchEnrollments","studentEnrollments","filter","enrollment","studentName","processedEnrollments","map","progress","completionStatus","Math","floor","random","courseName","handleEnroll","requestBody","post","Message","handleStudentClick","handleCourseClick","courseId","course","find","c","handleLogout","togglePreviousClasses","toggleStudents","toggleCourses","activeClasses","e","previousClasses","getProgressColor","minHeight","width","justify","align","bg","p","children","maxWidth","borderWidth","borderRadius","boxShadow","as","size","mb","textAlign","fileName","_jsxFileName","lineNumber","columnNumber","isOpen","onClose","colorScheme","onClick","justifyContent","alignItems","in","overflowX","maxHeight","variant","position","top","zIndex","length","student","studentId","color","email","colSpan","mt","description","spacing","index","mr","maxSeats","currentSeats","Date","startDate","toLocaleDateString","endDate","_c","$RefreshReg$"],"sources":["/Users/biswadeepmazumder/Desktop/UDAY/Project/frontend/src/Dashboard.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport {\n  Box, Heading, Text, Button, Stack, Flex, Grid, Table, Thead, Tbody, Tr, Th, Td, Collapse,\n  Modal, ModalOverlay, ModalContent, ModalHeader, ModalFooter, ModalBody, ModalCloseButton\n} from '@chakra-ui/react';\nimport { useLocation, useNavigate } from 'react-router-dom';\nimport axios from 'axios';\n\ninterface Enrollment {\n  courseName: string;\n  completionStatus: string;\n  progress?: number;\n}\n\ninterface Course {\n  courseId: number;\n  courseName: string;\n  description: string;\n  maxSeats: number;\n  currentSeats: number;\n  startDate: string;\n  endDate: string;\n}\n\ninterface Student {\n  studentId: number;\n  fullName: string;\n  email: string;\n  enrollementdate: string;\n}\n\nconst Dashboard: React.FC = () => {\n  const navigate = useNavigate();\n  const location = useLocation();\n  const { fullName, userId, userType } = location.state || {}; // Extract userType here\n\n  const [enrollments, setEnrollments] = useState<Enrollment[]>([]);\n  const [availableCourses, setAvailableCourses] = useState<Course[]>([]);\n  const [students, setStudents] = useState<Student[]>([]); // State to hold student list\n  const [selectedStudentEnrollments, setSelectedStudentEnrollments] = useState<Enrollment[]>([]); // Enrollments for selected student\n  const [selectedStudentName, setSelectedStudentName] = useState<string | null>(null); // Selected student's name\n\n  const [selectedCourseDetails, setSelectedCourseDetails] = useState<Course | null>(null); // Selected course details\n  const [isCoursesOpen, setIsCoursesOpen] = useState(false); // Collapsible state for the courses list\n  const [studentModalOpen, setStudentModalOpen] = useState(false);  // Modal for student enrollments\n  const [courseModalOpen, setCourseModalOpen] = useState(false);  // Modal for course details\n  const [isPreviousClassesOpen, setIsPreviousClassesOpen] = useState(false);  // Set to false initially\n  const [isStudentsOpen, setIsStudentsOpen] = useState(false);  // Collapsible state for the student list\n  const [modalMessage, setModalMessage] = useState<string | null>(null);  // Modal message state\n  const [isModalOpen, setIsModalOpen] = useState(false); // Control modal for enrollment status\n\n  useEffect(() => {\n    // Fetch courses regardless of the userType\n    const fetchCourses = async () => {\n      try {\n        const response = await axios.get('http://localhost:5000/api/Course/ShowAllCourses');\n        setAvailableCourses(response.data);\n      } catch (error) {\n        console.error('Error fetching courses:', error);\n      }\n    };\n\n    if (userType === 1) {\n      // Admin user: Fetch the list of students and courses\n      const fetchStudents = async () => {\n        try {\n          const response = await axios.get('http://localhost:5000/api/Students/ShowAllStudents');\n          setStudents(response.data);\n        } catch (error) {\n          console.error('Error fetching students:', error);\n        }\n      };\n\n      fetchStudents();\n      fetchCourses(); // Fetch courses for admin users\n    } else if (userType === 2) {\n      // Student user: Fetch enrollments and courses\n      const fetchEnrollments = async () => {\n        try {\n          const response = await axios.get('http://localhost:5000/api/Enrollments/GetAllEnrollments');\n          const studentEnrollments = response.data.data.filter((enrollment: any) => enrollment.studentName === fullName);\n\n          const processedEnrollments = studentEnrollments.map((enrollment: any) => {\n            let progress = 0;\n            if (enrollment.completionStatus === \"1\") {\n              progress = 100;\n            } else {\n              progress = Math.floor(Math.random() * (90 - 20 + 1)) + 20;\n            }\n            return {\n              courseName: enrollment.courseName,\n              completionStatus: enrollment.completionStatus,\n              progress,\n            };\n          });\n\n          setEnrollments(processedEnrollments);\n        } catch (error) {\n          console.error('Error fetching enrollments:', error);\n        }\n      };\n\n      fetchEnrollments();\n      fetchCourses(); // Fetch courses for student users\n    }\n  }, [fullName, userType]);\n\n\n  const handleEnroll = async (courseName: string) => {\n    try {\n      // Log the request body for debugging purposes\n      const requestBody = {\n        studentName: fullName,\n        courseName: courseName,\n      };\n\n      // Make the API call to enroll the student in the course\n      const response = await axios.post('http://localhost:5000/api/Enrollments/JoinCourse', requestBody);\n\n      if (response.data && response.data.Message) {\n        setModalMessage(response.data.Message);\n      } else {\n        setModalMessage('Successfully enrolled in the course.');\n      }\n\n      setIsModalOpen(true); // Open the modal to show the message\n\n      // Refetch the enrollments after enrolling in a course\n      const fetchEnrollments = async () => {\n        try {\n          const response = await axios.get('http://localhost:5000/GetAllEnrollments');\n          const studentEnrollments = response.data.data.filter((enrollment: any) => enrollment.studentName === fullName);\n\n          const processedEnrollments = studentEnrollments.map((enrollment: any) => {\n            let progress = 0;\n            if (enrollment.completionStatus === \"1\") {\n              progress = 100;\n            } else {\n              progress = Math.floor(Math.random() * (90 - 20 + 1)) + 20;\n            }\n            return {\n              courseName: enrollment.courseName,\n              completionStatus: enrollment.completionStatus,\n              progress,\n            };\n          });\n\n          setEnrollments(processedEnrollments);\n        } catch (error) {\n          console.error('Error refetching enrollments:', error);\n          setModalMessage('Error refetching enrollments. Please try again.');\n          setIsModalOpen(true);\n        }\n      };\n\n      fetchEnrollments();\n    } catch (error: any) {\n      console.error('Error during enrollment:', error);\n\n      if (error.response && error.response.data && error.response.data.Message) {\n        setModalMessage(error.response.data.Message);\n      } else if (error.response && error.response.data) {\n        setModalMessage(error.response.data);\n      } else {\n        setModalMessage('An unexpected error occurred. Please try again.');\n      }\n\n      setIsModalOpen(true); // Show modal even in case of error\n    }\n  };\n\n  // Fetch enrollments for a particular student\n  const handleStudentClick = async (studentName: string) => {\n    try {\n      const response = await axios.get('http://localhost:5000/GetAllEnrollments');\n      const studentEnrollments = response.data.data.filter((enrollment: any) => enrollment.studentName === studentName);\n\n      const processedEnrollments = studentEnrollments.map((enrollment: any) => ({\n        courseName: enrollment.courseName,\n        completionStatus: enrollment.completionStatus,\n        progress: enrollment.completionStatus === \"1\" ? 100 : Math.floor(Math.random() * (90 - 20 + 1)) + 20,\n      }));\n\n      setSelectedStudentEnrollments(processedEnrollments);\n      setSelectedStudentName(studentName);\n      setStudentModalOpen(true); // Open the modal\n    } catch (error) {\n      console.error('Error fetching student enrollments:', error);\n    }\n  };\n\n  // Fetch course details when clicking on a course\n  const handleCourseClick = async (courseId: number) => {\n    try {\n      const course = availableCourses.find(c => c.courseId === courseId);\n      if (course) {\n        setSelectedCourseDetails(course);\n        setCourseModalOpen(true); // Open the modal\n      }\n    } catch (error) {\n      console.error('Error fetching course details:', error);\n    }\n  };\n\n  const handleLogout = () => {\n    navigate('/');\n  };\n\n  const togglePreviousClasses = () => {\n    setIsPreviousClassesOpen(!isPreviousClassesOpen);\n  };\n\n  const toggleStudents = () => {\n    setIsStudentsOpen(!isStudentsOpen);\n  };\n\n  const toggleCourses = () => {\n    setIsCoursesOpen(!isCoursesOpen);\n  };\n\n  // Split enrollments into active and previous\n  const activeClasses = enrollments.filter((e) => e.completionStatus === '0');\n  const previousClasses = enrollments.filter((e) => e.completionStatus === '1');\n\n  const getProgressColor = (progress: number) => {\n    if (progress === 100) return 'green.300';\n    if (progress < 60) return 'red.300';\n    if (progress < 90) return 'yellow.300';\n    return 'teal.300';  // Default color\n  };\n\n  return (\n    <Flex minHeight=\"100vh\" width=\"100vw\" justify=\"center\" align=\"start\" bg=\"gray.50\" p={6}>\n      <Box p={8} maxWidth=\"1200px\" width=\"100%\" borderWidth={1} borderRadius={8} boxShadow=\"lg\" bg=\"white\">\n        <Heading as=\"h2\" size=\"xl\" mb={6} textAlign=\"center\">\n          {userType === 1 ? 'Admin Dashboard' : 'Student Dashboard'}\n        </Heading>\n        <Heading as=\"h6\" size=\"l\" mb={5} textAlign=\"center\">\n          User ID: {userId}, <i><b>{fullName}</b></i>\n        </Heading>\n\n        {/* Enroll Modal */}\n        <Modal isOpen={isModalOpen} onClose={() => setIsModalOpen(false)}>\n          <ModalOverlay />\n          <ModalContent>\n            <ModalHeader>Enrollment Status</ModalHeader>\n            <ModalCloseButton />\n            <ModalBody>\n              <Text>{modalMessage}</Text>\n            </ModalBody>\n            <ModalFooter>\n              <Button colorScheme=\"blue\" onClick={() => setIsModalOpen(false)}>\n                Close\n              </Button>\n            </ModalFooter>\n          </ModalContent>\n        </Modal>\n\n        {/* Rest of the dashboard */}\n        {userType === 1 ? (\n          <>\n            {/* Admin Dashboard */}\n            {/* List of Students */}\n            <Box>\n              <Flex justifyContent=\"space-between\" alignItems=\"center\">\n                <Heading as=\"h3\" size=\"md\" mb={4}>List of Students</Heading>\n                <Button size=\"sm\" onClick={toggleStudents}>\n                  {isStudentsOpen ? 'Hide' : 'Show'}\n                </Button>\n              </Flex>\n              <Collapse in={isStudentsOpen}>\n                <Flex overflowX=\"auto\" maxHeight=\"400px\">\n                  <Table variant=\"simple\" size=\"md\" width=\"100%\">\n                    <Thead>\n                      <Tr>\n                        <Th position=\"sticky\" top={0} bg=\"gray.100\" width=\"25%\" zIndex={1}>Student ID</Th>\n                        <Th position=\"sticky\" top={0} bg=\"gray.100\" width=\"100%\" zIndex={1}>Full Name</Th>\n                        <Th position=\"sticky\" top={0} bg=\"gray.100\" width=\"100%\" zIndex={1}>Email</Th>\n                      </Tr>\n                    </Thead>\n                    <Tbody>\n                      {students.length > 0 ? (\n                        students.map((student) => (\n                          <Tr key={student.studentId}>\n                            <Td>{student.studentId}</Td>\n                            <Td>\n                              <Text\n                                as=\"button\"\n                                color=\"blue.500\"\n                                onClick={() => handleStudentClick(student.fullName)}\n                              >\n                                {student.fullName}\n                              </Text>\n                            </Td>\n                            <Td>{student.email}</Td>\n                          </Tr>\n                        ))\n                      ) : (\n                        <Tr>\n                          <Td colSpan={5} textAlign=\"center\">No students found.</Td>\n                        </Tr>\n                      )}\n                    </Tbody>\n                  </Table>\n                </Flex>\n              </Collapse>\n            </Box>\n\n            {/* List of Courses */}\n            <Box mt={6}>\n              <Flex justifyContent=\"space-between\" alignItems=\"center\">\n                <Heading as=\"h3\" size=\"md\" mb={4}>List of Courses</Heading>\n                <Button size=\"sm\" onClick={toggleCourses}>\n                  {isCoursesOpen ? 'Hide' : 'Show'}\n                </Button>\n              </Flex>\n              <Collapse in={isCoursesOpen}>\n                <Flex overflowX=\"auto\" maxHeight=\"400px\">\n                  <Table variant=\"simple\" size=\"md\" width=\"100%\">\n                    <Thead>\n                      <Tr>\n                        <Th position=\"sticky\" top={0} bg=\"gray.100\" width=\"25%\" zIndex={1}>Course ID</Th>\n                        <Th position=\"sticky\" top={0} bg=\"gray.100\" width=\"40%\" zIndex={1}>Course Name</Th>\n                        <Th position=\"sticky\" top={0} bg=\"gray.100\" width=\"100%\" zIndex={1}>Description</Th>\n                      </Tr>\n                    </Thead>\n                    <Tbody>\n                      {availableCourses.length > 0 ? (\n                        availableCourses.map((course) => (\n                          <Tr key={course.courseId}>\n                            <Td>{course.courseId}</Td>\n                            <Td>\n                              <Text\n                                as=\"button\"\n                                color=\"blue.500\"\n                                onClick={() => handleCourseClick(course.courseId)}\n                              >\n                                {course.courseName}\n                              </Text>\n                            </Td>\n                            <Td>{course.description}</Td>\n                          </Tr>\n                        ))\n                      ) : (\n                        <Tr>\n                          <Td colSpan={5} textAlign=\"center\">No courses found.</Td>\n                        </Tr>\n                      )}\n                    </Tbody>\n                  </Table>\n                </Flex>\n              </Collapse>\n            </Box>\n          </>\n        ) : (\n          // Student Dashboard Content (remains unchanged)\n          <Stack spacing={6}>\n            {/* Previous Classes Section */}\n            {/* Active Classes Section */}\n            {/* Available Classes Section */}\n          </Stack>\n        )}\n\n        {/* Modal for showing student enrollment details */}\n        <Modal isOpen={studentModalOpen} onClose={() => setStudentModalOpen(false)}>\n          <ModalOverlay />\n          <ModalContent>\n            <ModalHeader>{selectedStudentName}'s Enrollments</ModalHeader>\n            <ModalCloseButton />\n            <ModalBody>\n              {selectedStudentEnrollments.length > 0 ? (\n                <Stack spacing={4}>\n                  {selectedStudentEnrollments.map((enrollment, index) => (\n                    <Box key={index} p={4} borderWidth={1} borderRadius={8} bg={getProgressColor(enrollment.progress!)}>\n                      <Heading size=\"sm\">{enrollment.courseName}</Heading>\n                      <Text>Completion Status: {enrollment.completionStatus === '1' ? 'Completed' : 'In Progress'}</Text>\n                      <Text>Progress: {enrollment.progress}%</Text>\n                    </Box>\n                  ))}\n                </Stack>\n              ) : (\n                <Text>No enrollments found for this student.</Text>\n              )}\n            </ModalBody>\n            <ModalFooter>\n              <Button colorScheme=\"blue\" mr={3} onClick={() => setStudentModalOpen(false)}>Close</Button>\n            </ModalFooter>\n          </ModalContent>\n        </Modal>\n\n        {/* Modal for showing course details */}\n        <Modal isOpen={courseModalOpen} onClose={() => setCourseModalOpen(false)}>\n          <ModalOverlay />\n          <ModalContent>\n            <ModalHeader>{selectedCourseDetails?.courseName} Details</ModalHeader>\n            <ModalCloseButton />\n            <ModalBody>\n              {selectedCourseDetails ? (\n                <Stack spacing={4}>\n                  <Text><strong>Description:</strong> {selectedCourseDetails.description}</Text>\n                  <Text><strong>Max Seats:</strong> {selectedCourseDetails.maxSeats}</Text>\n                  <Text><strong>Current Seats:</strong> {selectedCourseDetails.currentSeats}</Text>\n                  <Text><strong>Start Date:</strong> {new Date(selectedCourseDetails.startDate).toLocaleDateString()}</Text>\n                  <Text><strong>End Date:</strong> {new Date(selectedCourseDetails.endDate).toLocaleDateString()}</Text>\n                </Stack>\n              ) : (\n                <Text>No details available for this course.</Text>\n              )}\n            </ModalBody>\n            <ModalFooter>\n              <Button colorScheme=\"blue\" mr={3} onClick={() => setCourseModalOpen(false)}>Close</Button>\n            </ModalFooter>\n          </ModalContent>\n        </Modal>\n      </Box>\n    </Flex>\n  );\n};\n\nexport default Dashboard;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}